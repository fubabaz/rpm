<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.2//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="SqlMapRpmSessionDao">


<select id="selectInstanceNameList" parameterType="com.b2en.rpm.viewpart.vo.InstanceNameSearchParamVO" resultType="com.b2en.rpm.viewpart.vo.InstanceNameSearchResultVO">
	 <![CDATA[
		
		select inst_id, instance_name from gv$instance order by instance_name
   ]]>
	</select>
	
<select id="selectAshSampleTimeList" parameterType="com.b2en.rpm.viewpart.vo.AShSampleTimeParamVO" resultType="com.b2en.rpm.viewpart.vo.AshSampleTimeResultVO">
	 <![CDATA[
	
WITH w1 AS (SELECT   TO_CHAR (TRUNC (a.sample_time, 'HH') + NUMTODSINTERVAL (1, 'HOUR'), 'YYYY-MM-DD HH24:MI') AS sample_time
                   , COUNT (CASE WHEN a.session_state = 'ON CPU'  THEN 1 END) AS cpu
                   , COUNT (CASE WHEN a.session_state = 'WAITING' THEN 1 END) AS wait
                FROM gv$active_session_history a
               WHERE 1 = 1
                 AND a.inst_id = 1
                 AND a.sample_time <= TRUNC (SYSDATE, 'HH')
            GROUP BY TO_CHAR (TRUNC (a.sample_time, 'HH') + NUMTODSINTERVAL (1, 'HOUR'), 'YYYY-MM-DD HH24:MI'))
SELECT   a.sample_time  as baseTime
       , a.cpu as tempVal01
       , a.wait as tempVal02
    FROM (SELECT a.*
               , ROW_NUMBER () OVER (ORDER BY a.sample_time) AS RN
            FROM w1 a) a
ORDER BY a.sample_time DESC
   ]]>
	</select>
	
	
	<select id="selectAshMetricNameList" parameterType="com.b2en.rpm.viewpart.vo.AshMetricNameParamVO" resultType="com.b2en.rpm.viewpart.vo.AshMetricNameResultVO">
	 <![CDATA[
		SELECT   a.group_id AS groupId
       , a.metric_id as metricId
       , a.metric_name as metricName
       , a.metric_unit as metricUnit
    FROM v$metricname a
   WHERE a.group_id = 2
     AND a.metric_unit IN ('Blocks Per Second'
                         , 'bytes'
                         , 'bytes per sec'
                         , 'Bytes Per Second'
                         , 'Calls Per Second'
                         , 'Calls Per Second'
                         , 'Executes Per Second'
                         , 'Executes Per Second'
                         , 'Logons Per Second'
                         , 'Megabtyes per Second'
                         , 'Parses Per Second'
                         , 'Reads Per Second'
                         , 'Transactions Per Second'
                         , 'Writes Per Second')
		ORDER BY a.metric_id
   ]]>
	</select>
	
	
	
	<select id="selectAshActivityList" parameterType="com.b2en.rpm.viewpart.vo.AshActivitySearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivitySearchResultVO">
	 <![CDATA[			
	 
	WITH w1 AS (SELECT     NVL2 (#{sampleTime}, TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS'), TO_DATE(SUBSTR(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),1,17)||SUBSTR(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),18,1)||'0','YYYY-MM-DD HH24:MI:SS')) - NUMTODSINTERVAL ((LEVEL + 1) * #{second}, 'SECOND') AS sample_time
                  FROM DUAL
            CONNECT BY LEVEL <= (#{interval} * #{second}) / #{second})
   , w2 AS (SELECT TRUNC (a.sample_time, 'MI') + NUMTODSINTERVAL (FLOOR (TO_CHAR (a.sample_Time, 'SS') / #{second}) * #{second}, 'SECOND') AS sample_time
                 , a.wait_class
                 , a.session_state
              FROM gv$active_session_history a
             WHERE 1 = 1
               AND a.inst_id = #{instId}
               AND a.sample_time BETWEEN NVL2 (#{sampleTime}, TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS'), SYSTIMESTAMP) - NUMTODSINTERVAL (#{interval} * #{second}, 'SECOND')
                                     AND NVL2 (#{sampleTime}, TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS'), SYSTIMESTAMP))
   , w3 AS (SELECT   a.sample_time
                   , COUNT (CASE WHEN a.wait_class = 'Application'                                                                 THEN 1 END) AS application
                   , COUNT (CASE WHEN a.wait_class = 'Concurrency'                                                                 THEN 1 END) AS concurrency
                   , COUNT (CASE WHEN a.wait_class = 'User I/O'                                                                    THEN 1 END) AS user_io
                   , COUNT (CASE WHEN a.session_state = 'WAITING' AND wait_class NOT IN ('Application', 'Concurrency', 'User I/O') THEN 1 END) AS other_wait
                   , COUNT (CASE WHEN a.session_state = 'ON CPU'                                                                   THEN 1 END) AS cpu -- 2016-11-24 18:00:00
                FROM w2 a
            GROUP BY a.sample_time)
SELECT   TO_CHAR (a.sample_time, 'HH24:MI:SS') AS sample_time
       , NVL (b.application, 0) AS application
       , NVL (b.concurrency, 0) AS concurrency
       , NVL (b.user_io    , 0) AS user_io
       , NVL (b.other_wait , 0) AS other_wait
       , NVL (b.cpu        , 0) AS cpu
    FROM w1 a
       , w3 b
   WHERE a.sample_time <= SYSDATE
     AND b.sample_time(+) = a.sample_time
ORDER BY a.sample_time
	
   ]]>
	</select>
	
		<select id="selectAshSysmetricHistory" parameterType="com.b2en.rpm.viewpart.vo.AshSysmetricHistorySearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshSysmetricHistorySearchResultVO">
	 <![CDATA[
	 
	 WITH w1 AS (SELECT     LEVEL AS instance_number
                  FROM DUAL
                 WHERE 1 = 1
                   AND LEVEL  = #{instId}
            CONNECT BY LEVEL <= #{instCn})
   , w2 AS (SELECT     TO_DATE (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL ((LEVEL - 1), 'MINUTE') AS begin_time
                  FROM DUAL
            CONNECT BY LEVEL <= #{hour} * 60)
   , w3 AS (SELECT b.*
              FROM dba_hist_snapshot a
                 , dba_hist_sysmetric_history b
             WHERE a.instance_number = #{instId}
               AND a.begin_interval_time BETWEEN TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL (1, 'MINUTE') - NUMTODSINTERVAL (#{hour}, 'HOUR') 
                                             AND TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI') + NUMTODSINTERVAL (1, 'MINUTE')
               AND b.snap_id = a.snap_id
               AND b.dbid = a.dbid
               AND b.instance_number = a.instance_number
               AND b.begin_time BETWEEN TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL (1, 'MINUTE') - NUMTODSINTERVAL (#{hour}, 'HOUR')
                                    AND TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI') + NUMTODSINTERVAL (1, 'MINUTE')
                 AND b.group_id = #{groupId}
		               AND b.metric_id = #{metricId})
SELECT   a.instance_number as instanceNumber
       , TO_CHAR (b.begin_time, 'HH24:MI') AS beginTime
       , NVL (ROUND (c.value, 2), 0) AS value
    FROM w1 a
       , w2 b
       , w3 c
   WHERE c.instance_number(+) = a.instance_number
     AND b.begin_time BETWEEN c.begin_time(+) AND c.end_time(+)
ORDER BY a.instance_number
       , b.begin_time
   ]]>
	</select>
	
	
	<select id="selectAshSysmetricRealTime" parameterType="com.b2en.rpm.viewpart.vo.AshSysmetricHistorySearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshSysmetricHistorySearchResultVO">
	 <![CDATA[
	 
	 WITH w1 AS (SELECT     LEVEL AS inst_id
                  FROM DUAL
                 WHERE 1 = 1
                    AND LEVEL  = #{instId}
            CONNECT BY LEVEL <= #{instCn})
   , w2 AS (SELECT     NVL2(#{beginIntervalTime}, TO_DATE (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI'), SYSDATE) - NUMTODSINTERVAL ((LEVEL - 1), 'MINUTE') AS begin_time
                  FROM DUAL
            CONNECT BY LEVEL <= #{interval} + 1)
   , w3 AS (SELECT a.*
              FROM gv$sysmetric_history a
             WHERE 1 = 1
               AND a.inst_id = #{instId}
               AND a.begin_time BETWEEN NVL2 (#{beginIntervalTime}, TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI'), SYSTIMESTAMP) - NUMTODSINTERVAL (#{interval} + 1, 'MINUTE') -- 2016-11-24 19:45
                                    AND NVL2 (#{beginIntervalTime}, TO_TIMESTAMP (#{beginIntervalTime}, 'YYYY-MM-DD HH24:MI'), SYSTIMESTAMP) + NUMTODSINTERVAL (1, 'MINUTE')
                AND a.group_id = #{groupId}
		               AND a.metric_id = #{metricId})
SELECT   a.inst_id  as instanceNumber
       , TO_CHAR (b.begin_time, 'HH24:MI') AS beginTime
       , NVL (ROUND (c.value, 2), 0) AS value
    FROM w1 a
       , w2 b
       , w3 c
   WHERE c.inst_id = a.inst_id
     AND b.begin_time BETWEEN c.begin_time AND c.end_time 
ORDER BY a.inst_id
       , b.begin_time
      
   ]]>
	</select>
	

	<select id="selectAshActivityDetail" parameterType="com.b2en.rpm.viewpart.vo.AshActivityDetailSearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivityDetailSearchResultVO">
	 <![CDATA[
		WITH w1 AS (SELECT     TO_CHAR (TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI') + NUMTODSINTERVAL (LEVEL - 1, 'SECOND'), 'YYYY-MM-DD HH24:MI:SS') AS sample_time
                  FROM DUAL
            CONNECT BY LEVEL <= #{minute} * 60) -- 6
   , w2 AS (SELECT   TO_CHAR (a.sample_time, 'YYYY-MM-DD HH24:MI:SS') AS sample_time
                   , a.wait_class
                   , a.session_state
                   , a.session_type
                FROM gv$active_session_history a
               WHERE 1 = 1
                 AND a.inst_id = #{instId}
                 AND a.sample_time BETWEEN TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI')
                                       AND TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI') + NUMTODSINTERVAL (#{minute}, 'MINUTE'))
   , w3 AS (SELECT   a.sample_time
                   , COUNT (CASE WHEN a.wait_class = 'Other'          THEN 1 END) AS other
                   , COUNT (CASE WHEN a.wait_class = 'Application'    THEN 1 END) AS application
                   , COUNT (CASE WHEN a.wait_class = 'Configuration'  THEN 1 END) AS configuration
                   , COUNT (CASE WHEN a.wait_class = 'Administrative' THEN 1 END) AS administrative
                   , COUNT (CASE WHEN a.wait_class = 'Concurrency'    THEN 1 END) AS concurrency
                   , COUNT (CASE WHEN a.wait_class = 'Commit'         THEN 1 END) AS commit
                   , COUNT (CASE WHEN a.wait_class = 'Idle'           THEN 1 END) AS Idle
                   , COUNT (CASE WHEN a.wait_class = 'Network'        THEN 1 END) AS network
                   , COUNT (CASE WHEN a.wait_class = 'User I/O'       THEN 1 END) AS user_io
                   , COUNT (CASE WHEN a.wait_class = 'System I/O'     THEN 1 END) AS system_io
                   , COUNT (CASE WHEN a.wait_class = 'Scheduler'      THEN 1 END) AS scheduler
                   , COUNT (CASE WHEN a.wait_class = 'Cluster'        THEN 1 END) AS clust
                   , COUNT (CASE WHEN a.wait_class = 'Queueing'       THEN 1 END) AS queueing
                   , COUNT (CASE WHEN a.session_state = 'ON CPU' AND a.session_type = 'FOREGROUND' THEN 1 END) AS cpu
                   , COUNT (CASE WHEN a.session_state = 'ON CPU' AND a.session_type = 'BACKGROUND' THEN 1 END) AS bcpu
                FROM w2 a
            GROUP BY a.sample_time)
SELECT   SUBSTR (a.sample_time, 12, 11) AS begin_time
       , NVL (b.other         , 0) AS other
       , NVL (b.application   , 0) AS application
       , NVL (b.configuration , 0) AS configuration
       , NVL (b.administrative, 0) AS administrative
       , NVL (b.concurrency   , 0) AS concurrency
       , NVL (b.commit        , 0) AS commit
       , NVL (b.Idle          , 0) AS Idle
       , NVL (b.network       , 0) AS network
       , NVL (b.user_io       , 0) AS user_io
       , NVL (b.system_io     , 0) AS system_io
       , NVL (b.scheduler     , 0) AS scheduler
       , NVL (b.clust         , 0) AS clust
       , NVL (b.queueing      , 0) AS queueing
       , NVL (b.cpu           , 0) AS cpu
       , NVL (b.bcpu          , 0) AS bcpu
    FROM w1 a
       , w3 b
   WHERE a.sample_time <= TO_CHAR (SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
     AND b.sample_time(+) = a.sample_time
ORDER BY a.sample_time

   ]]>
	</select>
	
	
	
	<select id="selectAshActivitySession" parameterType="com.b2en.rpm.viewpart.vo.AshActivitySessionSearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivitySessionSearchResultVO">
	 <![CDATA[
		SELECT   a.inst_id as instId
       , a.session_id as sessionId
       , a.session_serial#  as sessionSerial
       , ROUND (RATIO_TO_REPORT (COUNT (*)) OVER () * 100, 2) AS rt
       , COUNT (CASE WHEN a.session_state = 'ON CPU'  THEN 1 END) AS cpu
       , COUNT (CASE WHEN a.session_state = 'WAITING' THEN 1 END) AS wait
       , SUBSTR (NUMTODSINTERVAL (SUM (a.tm_delta_cpu_time) / 1000000, 'SECOND'), 12, 11) AS tmDeltaCpuTime
       , SUBSTR (NUMTODSINTERVAL (SUM (a.tm_delta_db_time)  / 1000000, 'SECOND'), 12, 11) AS tmDeltaDbTime
       , SUM (a.delta_read_io_bytes) AS deltaReadIoBytes
       , SUM (a.delta_write_io_bytes) AS deltaWriteIoBytes
       , SUM (a.delta_interconnect_io_bytes) AS deltaInterconnectIoBytes
       , SUM (a.delta_read_mem_bytes) AS deltaReadMemBytes
    FROM gv$active_session_history a
   WHERE a.inst_id = 1
     AND a.sample_time BETWEEN TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS')
                           AND TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS') + NUMTODSINTERVAL (#{minute}, 'MINUTE')
     AND a.session_id IS NOT NULL
     AND a.session_serial# IS NOT NULL
GROUP BY a.inst_id
       , a.session_id
       , a.session_serial#
ORDER BY rt DESC
       , a.inst_id
       , a.session_id
       , a.session_serial#
   ]]>
	</select>
	
	
	
	
	<select id="selectAshActivitySql" parameterType="com.b2en.rpm.viewpart.vo.AshActivitySqlSearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivitySqlSearchResultVO">
	 <![CDATA[
		SELECT   a.inst_id as instId
       , a.sql_id as sqlId
       , a.sql_child_number as sqlChildNumber
       , ROUND (RATIO_TO_REPORT (COUNT (*)) OVER () * 100, 2) AS rt
       , COUNT (CASE WHEN a.session_state = 'ON CPU'  THEN 1 END) AS cpu
       , COUNT (CASE WHEN a.session_state = 'WAITING' THEN 1 END) AS wait
       , SUBSTR (NUMTODSINTERVAL (SUM (a.tm_delta_cpu_time) / 1000000, 'SECOND'), 12, 11) AS tmDeltaCpuTime
       , SUBSTR (NUMTODSINTERVAL (SUM (a.tm_delta_db_time)  / 1000000, 'SECOND'), 12, 11) AS tmDeltaDbTime
       , SUM (a.delta_read_io_bytes) AS deltaReadIoBytes
       , SUM (a.delta_write_io_bytes) AS deltaWriteIoBytes
       , SUM (a.delta_interconnect_io_bytes) AS deltaInterconnectIoBytes
       , SUM (a.delta_read_mem_bytes) AS deltaReadMemBytes
    FROM gv$active_session_history a
   WHERE a.inst_id = #{instId}
     AND a.sample_time BETWEEN TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS')
                           AND TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI:SS') + NUMTODSINTERVAL (#{minute}, 'MINUTE')
     AND a.sql_id IS NOT NULL
GROUP BY a.inst_id
       , a.sql_id
       , a.sql_child_number
ORDER BY rt DESC
       , a.inst_id
       , a.sql_id
       , a.sql_child_number
   ]]>
	</select>
	
	

	<select id="selectSessionViewerList" resultType="com.b2en.rpm.session.vo.SessionViewInfo">
		SELECT   /*+ USE_HASH(A B) */
	         NVL2 (b.qcinst_id, LPAD (' ', 2, ' ') || d.pname || ' (' || b.server_group || ',' || b.server_set || ',' || b.server# || ')', a.username) AS username
	       , NVL2 (b.qcinst_id, 2, 1) AS depth
	       , a.inst_id
	       , a.sid
	       , a.serial# AS serial
	       , TO_CHAR (a.logon_time, 'YYYY-MM-DD HH24:MI') AS logon_time
	       , a.status
	       , a.service_name
	       , a.module
	       , a.action
	       , a.client_info
	    -- , a.machine
	    -- , a.osuser
	    -- , a.program
	     --  , usf_unit (NVL2 (b.qcinst_id, c.consistent_gets, SUM (c.consistent_gets) OVER (PARTITION BY NVL (b.qcsid, a.sid))) * g.value, 1024) AS consistent_gets
	     --  , usf_unit (NVL2 (b.qcinst_id, c.physical_reads , SUM (c.physical_reads)  OVER (PARTITION BY NVL (b.qcsid, a.sid))) * g.value, 1024) AS physical_reads
	     --  , usf_unit (NVL2 (b.qcinst_id, d.pga_alloc_mem  , SUM (d.pga_alloc_mem)   OVER (PARTITION BY NVL (b.qcsid, a.sid)))          , 1024) AS pga_alloc_mem
	     --  , usf_unit (NVL2 (b.qcinst_id, e.bytes          , SUM (e.bytes)           OVER (PARTITION BY NVL (b.qcsid, a.sid)))          , 1024) AS tempseg_usage
	     --  , usf_unit (NVL2 (b.qcinst_id, f.used_ublk      , SUM (f.used_ublk)       OVER (PARTITION BY NVL (b.qcsid, a.sid))) * g.value, 1024) AS used_undo
	       , NVL (a.sql_id, a.prev_sql_id) AS sql_id
	       , NVL (a.sql_child_number, a.prev_child_number) AS sql_child_number
	       , NVL (a.sql_exec_start, a.prev_exec_start) AS sql_exec_start
	       , NVL (a.sql_exec_id, a.prev_exec_id) AS sql_exec_id
	         --
	       , GREATEST (COUNT (*) OVER (PARTITION BY NVL (b.qcinst_id, a.inst_id), NVL (b.qcsid, a.sid), NVL (b.qcserial#, a.serial#)) - 1, 1) AS px_dop
	       , a.saddr
	       , a.paddr
	       , a.taddr
	       , d.pid
	       , d.serial# AS pserial
	    FROM gv$session a
	       , gv$px_session b
	       , gv$sess_io c
	       , gv$process d
	       , (SELECT   a.inst_id
	                 , a.session_addr
	                 , SUM (a.blocks * b.block_size) AS bytes
	              FROM gv$tempseg_usage a
	                 , dba_tablespaces b
	             WHERE b.tablespace_name = a.tablespace
	          GROUP BY a.inst_id
	                 , a.session_addr) e
	       , gv$transaction f
	       , v$parameter g
	   WHERE a.type <![CDATA[<>]]> 'BACKGROUND'
	     AND a.MODULE NOT LIKE 'oraagent.bin@%'
	     AND b.inst_id(+) = a.inst_id
	     AND b.saddr(+) = a.saddr
	     AND c.inst_id(+) = a.inst_id
	     AND c.sid(+) = a.sid
	     AND d.inst_id(+) = a.inst_id
	     AND d.addr(+) = a.paddr
	     AND e.inst_id(+) = a.inst_id
	     AND e.session_addr(+) = a.saddr
	     AND f.inst_id(+) = a.inst_id
	     AND f.addr(+) = a.taddr
	     AND g.name(+) = 'db_block_size'
	ORDER BY a.username
	       , a.service_name
	       , a.module
	       , a.action
	       , a.client_info
	       , NVL (b.qcinst_id, a.inst_id)
	       , NVL (b.qcsid, a.sid)
	       , NVL (b.qcserial#, a.serial#)
	       , b.qcserial# NULLS FIRST
	       , b.server_group
	       , b.server_set
	       , b.server#
	       , a.sql_id
	       , a.sql_child_number
	</select>

	<select id="selectSqlFullTextInfo" parameterType="com.b2en.rpm.session.vo.SessionViewInfo" resultType="string">
		SELECT a.sql_fulltext
  		  FROM gv$sql a
 		 WHERE a.inst_id = #{instId}
   		   AND a.sql_id = #{sqlId}
   		   AND a.child_number = #{sqlChildNumber}
   	</select>
   	
   	
   	<select id="selectSqlPlanInfo" parameterType="com.b2en.rpm.session.vo.SessionViewInfo" resultType="com.b2en.rpm.session.vo.SessionStatisticsInfo">
		select PLAN_TABLE_OUTPUT AS value 
		from table (dbms_xplan.display_cursor(#{sqlId},#{sqlChildNumber},'allstats last'))				
   	</select>
	
	<select id="selectStatisticsList" parameterType="com.b2en.rpm.session.vo.SessionViewInfo" resultType="com.b2en.rpm.session.vo.SessionStatisticsInfo">
		SELECT CASE b.class
	             WHEN 1   THEN 'User'
	             WHEN 2   THEN 'Redo'
	             WHEN 4   THEN 'Enqueue'
	             WHEN 8   THEN 'Cache'
	             WHEN 16  THEN 'OS'
	             WHEN 32  THEN 'RAC'
	             WHEN 33  THEN 'RAC + User'
	             WHEN 34  THEN 'RAC + Redo'
	             WHEN 40  THEN 'RAC + Cache'
	             WHEN 64  THEN 'SQL'
	             WHEN 72  THEN 'SQL + Cache'
	             WHEN 128 THEN 'Debug'
	             WHEN 192 THEN 'Debug + SQL'
	         END AS clazz
	       , b.name
	       , a.value
	       , CASE
	             WHEN REGEXP_LIKE (b.name, '(byte)|(memory)')
	             THEN round(a.value/1024,2)
	         END AS display_value
	    FROM gv$sesstat a
	       , v$statname b
	   WHERE a.inst_id = #{instId}
	     AND a.sid  = #{sid}
	     AND a.value > 0
	     AND b.statistic# = a.statistic#
	ORDER BY b.class
	       , b.name
	</select>
	
	<!-- AWR -->
	
	<select id="selectAwrSampleTimeList" parameterType="com.b2en.rpm.viewpart.vo.AShSampleTimeParamVO" resultType="com.b2en.rpm.viewpart.vo.AshSampleTimeResultVO">
	 <![CDATA[
	
			SELECT   TO_CHAR (a.begin_interval_time, 'YYYY-MM-DD') AS begin_interval_time
			       , TO_CHAR (a.begin_interval_time, 'YYYY-MM-DD HH24:MI') AS baseTime  
			    FROM dba_hist_ash_snapshot a
			   WHERE a.instance_number = 1
			ORDER BY a.begin_interval_time DESC
   ]]>
	</select>
	
	<select id="selectAwrMetricNameList" parameterType="com.b2en.rpm.viewpart.vo.AshMetricNameParamVO" resultType="com.b2en.rpm.viewpart.vo.AshMetricNameResultVO">
	 <![CDATA[
	 	
       
	SELECT   a.group_id AS groupId
       , a.metric_id  as metricId
       , a.metric_name as metricName
       , a.metric_unit as metricUnit
    FROM v$metricname a
   WHERE a.group_id = 2
     AND a.metric_unit IN ('Blocks Per Second'
                         , 'bytes'
                         , 'bytes per sec'
                         , 'Bytes Per Second'
                         , 'Calls Per Second'
                         , 'Calls Per Second'
                         , 'Executes Per Second'
                         , 'Executes Per Second'
                         , 'Logons Per Second'
                         , 'Megabtyes per Second'
                         , 'Parses Per Second'
                         , 'Reads Per Second'
                         , 'Transactions Per Second'
                         , 'Writes Per Second')
     AND EXISTS (SELECT /*+ UNNEST NL_SJ */
                        'X'
                   FROM dba_hist_sysmetric_history x
                  WHERE x.snap_id = (SELECT MAX (a.snap_id)
                                       FROM dba_hist_snapshot a
                                      WHERE a.instance_number = 1
                                        AND a.end_interval_time >= SYSTIMESTAMP - NUMTODSINTERVAL (2, 'HOUR'))
                    AND x.instance_number = 1
                    AND x.group_id = a.group_id
                    AND x.metric_id = a.metric_id)
ORDER BY a.METRIC_ID
	
	 ]]>
	</select>
	
	
	<select id="selectAwrActivityList" parameterType="com.b2en.rpm.viewpart.vo.AshActivitySearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivitySearchResultVO">
	 <![CDATA[							
		WITH w1 AS (SELECT     TO_DATE( #{sampleTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL ((LEVEL - 1) * #{minute}, 'MINUTE') AS sample_time
                  FROM DUAL
            CONNECT BY LEVEL <= (#{hour} * 60) / #{minute}) -- 24, 1
   , w2 AS (SELECT TRUNC (b.sample_time, 'HH') + NUMTODSINTERVAL (FLOOR (TO_CHAR (b.sample_time, 'MI') / #{minute}) * #{minute}, 'MINUTE') AS sample_time
                 , b.wait_class
                 , b.session_state
              FROM dba_hist_ash_snapshot a
                 , dba_hist_active_sess_history b
             WHERE a.instance_number = #{instId}
               AND a.begin_interval_time BETWEEN TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL (#{hour}, 'HOUR')
                                             AND TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI')
               AND b.snap_id = a.snap_id
               AND b.dbid = a.dbid
               AND b.instance_number = a.instance_number)
   , w3 AS (SELECT   a.sample_time
                   , COUNT (CASE WHEN a.wait_class = 'Application'                                                                 THEN 1 END) AS application
                   , COUNT (CASE WHEN a.wait_class = 'Concurrency'                                                                 THEN 1 END) AS concurrency
                   , COUNT (CASE WHEN a.wait_class = 'User I/O'                                                                    THEN 1 END) AS user_io
                   , COUNT (CASE WHEN a.session_state = 'WAITING' AND wait_class NOT IN ('Application', 'Concurrency', 'User I/O') THEN 1 END) AS other_wait
                   , COUNT (CASE WHEN a.session_state = 'ON CPU'                                                                   THEN 1 END) AS cpu
                FROM w2 a
            GROUP BY a.sample_time)
SELECT   TO_CHAR (a.sample_time, 'HH24:MI') AS sampleTime
       , NVL (b.application, 0) AS application
       , NVL (b.concurrency, 0) AS concurrency
       , NVL (b.user_io    , 0) AS userIo
       , NVL (b.other_wait , 0) AS otherWait
       , NVL (b.cpu        , 0) AS cpu
    FROM w1 a
       , w3 b
   WHERE b.sample_time(+) = a.sample_time
ORDER BY a.sample_time
   ]]>
	</select>
	
	<select id="selectAwrActivityDetail" parameterType="com.b2en.rpm.viewpart.vo.AshActivityDetailSearchParamVO" resultType="com.b2en.rpm.viewpart.vo.AshActivityDetailSearchResultVO">
	 <![CDATA[
		WITH w1 AS (SELECT     TO_DATE (#{sampleTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL ((LEVEL - 1) *#{second}, 'SECOND') AS sample_time
                  FROM DUAL
            CONNECT BY LEVEL <= (60 * 60) /#{second} * #{hour}) -- 10, 1
   , w2 AS (SELECT TRUNC (b.sample_time, 'MI') + NUMTODSINTERVAL (FLOOR (TO_CHAR (b.sample_time, 'SS') /#{second}) *#{second}, 'SECOND') AS sample_time
                 , b.wait_class
                 , b.session_state
                 , b.session_type
              FROM dba_hist_ash_snapshot a
                 , dba_hist_active_sess_history b
             WHERE a.instance_number =  #{instId}
               AND a.begin_interval_time BETWEEN TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI') - NUMTODSINTERVAL (#{hour}, 'HOUR')
                                             AND TO_TIMESTAMP (#{sampleTime}, 'YYYY-MM-DD HH24:MI')
               AND b.snap_id = a.snap_id
               AND b.dbid = a.dbid
               AND b.instance_number = a.instance_number)
   , w3 AS (SELECT   a.sample_time
                   , COUNT (CASE WHEN a.wait_class = 'Other'          THEN 1 END) AS other
                   , COUNT (CASE WHEN a.wait_class = 'Application'    THEN 1 END) AS application
                   , COUNT (CASE WHEN a.wait_class = 'Configuration'  THEN 1 END) AS configuration
                   , COUNT (CASE WHEN a.wait_class = 'Administrative' THEN 1 END) AS administrative
                   , COUNT (CASE WHEN a.wait_class = 'Concurrency'    THEN 1 END) AS concurrency
                   , COUNT (CASE WHEN a.wait_class = 'Commit'         THEN 1 END) AS commit
                   , COUNT (CASE WHEN a.wait_class = 'Idle'           THEN 1 END) AS Idle
                   , COUNT (CASE WHEN a.wait_class = 'Network'        THEN 1 END) AS network
                   , COUNT (CASE WHEN a.wait_class = 'User I/O'       THEN 1 END) AS user_io
                   , COUNT (CASE WHEN a.wait_class = 'System I/O'     THEN 1 END) AS system_io
                   , COUNT (CASE WHEN a.wait_class = 'Scheduler'      THEN 1 END) AS scheduler
                   , COUNT (CASE WHEN a.wait_class = 'Cluster'        THEN 1 END) AS clust
                   , COUNT (CASE WHEN a.wait_class = 'Queueing'       THEN 1 END) AS queueing
                   , COUNT (CASE WHEN a.session_state = 'ON CPU' AND a.session_type = 'FOREGROUND' THEN 1 END) AS cpu
                   , COUNT (CASE WHEN a.session_state = 'ON CPU' AND a.session_type = 'BACKGROUND' THEN 1 END) AS bcpu
                FROM w2 a
            GROUP BY a.sample_time)
SELECT   TO_CHAR (a.sample_time, 'HH24:MI:SS') AS begin_time
       , NVL (b.other         , 0) AS other
       , NVL (b.application   , 0) AS application
       , NVL (b.configuration , 0) AS configuration
       , NVL (b.administrative, 0) AS administrative
       , NVL (b.concurrency   , 0) AS concurrency
       , NVL (b.commit        , 0) AS commit
       , NVL (b.Idle          , 0) AS Idle
       , NVL (b.network       , 0) AS network
       , NVL (b.user_io       , 0) AS userIo
       , NVL (b.system_io     , 0) AS systemIo
       , NVL (b.scheduler     , 0) AS scheduler
       , NVL (b.clust         , 0) AS clust
       , NVL (b.queueing      , 0) AS queueing
       , NVL (b.cpu           , 0) AS cpu
       , NVL (b.bcpu          , 0) AS bcpu
    FROM w1 a
       , w3 b
   WHERE b.sample_time(+) = a.sample_time
ORDER BY a.sample_time
   ]]>
	</select>
	

	
</mapper>