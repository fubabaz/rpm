package com.b2en.rpm.ui.rcp.view.sqlviewer;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.ui.forms.widgets.ExpandableComposite;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.Section;

import com.b2en.rpm.sqlviewer.service.RpmSqlViewerService;
import com.b2en.rpm.sqlviewer.vo.SqlViewerOverViewInfo;
import com.b2en.rpm.sqlviewer.vo.SqlViewerParamInfo;
import com.b2en.rpm.sqlviewer.vo.SqlViewerSqlInfo;
import com.b2en.rpm.ui.rcp.util.SWTResourceUtil;
import com.b2en.rpm.ui.rcp.view.AbstractUtilView;
import com.b2en.ui.rcp.view.table.provider.StringArrayListLabelProvider;

public class SqlViewerView extends AbstractUtilView {
	private Logger logger = Logger.getLogger(getClass());

	public static final String ID = "RpmUIRcp.SqlViewerView";

	private final FormToolkit formToolkit = new FormToolkit(
			Display.getDefault());
	private Form form;

	private RpmSqlViewerService rpmSqlViewerService;

	private TableViewer sqlTableViewer;
	private Table sqlTable;

	private CTabFolder tapFolder;
	
	private TableViewer overviewTableViewer;
	private Table overviewTable;
	
	public SqlViewerView() {
		this.rpmSqlViewerService = (RpmSqlViewerService) getBizService(RpmSqlViewerService.class);
	}

	@Override
	public void createPartControl(Composite parent) {

		form = formToolkit.createForm(parent);
		formToolkit.paintBordersFor(form);
		form.getHead().setFont(getDefaultFont());
		form.getHead().setBackground(SWTResourceUtil.getColor(4, 46, 110));
		form.setFont(getFont(8, SWT.ITALIC));
		form.setForeground(SWTResourceUtil.getColor(SWT.COLOR_WHITE));
		form.setText("- SQL 목록입니다.");
		form.getBody().setLayout(new FillLayout(SWT.HORIZONTAL));

		ScrolledComposite scrolledComposite = new ScrolledComposite(
				form.getBody(), SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		formToolkit.adapt(scrolledComposite);
		formToolkit.paintBordersFor(scrolledComposite);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.setExpandVertical(true);

		Composite mainComposite = new Composite(scrolledComposite, SWT.NONE);
		formToolkit.adapt(mainComposite);
		formToolkit.paintBordersFor(mainComposite);
		mainComposite.setLayout(new GridLayout(1, false));
		mainComposite.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true, 1, 1));

		Section sqlListSection = formToolkit.createSection(mainComposite, ExpandableComposite.TITLE_BAR);
		sqlListSection.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		sqlListSection.setText("SQL LIST");
		formToolkit.paintBordersFor(sqlListSection);
		
		Composite sqlListComp = new Composite(sqlListSection, SWT.NONE);
		sqlListComp.setLayout(new GridLayout(1, false));
		sqlListComp.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		formToolkit.adapt(sqlListComp);
		formToolkit.paintBordersFor(sqlListComp);
		sqlListSection.setClient(sqlListComp);
		
		ScrolledComposite sqlTableScrolledComposite = new ScrolledComposite(sqlListComp, SWT.H_SCROLL | SWT.V_SCROLL);
		sqlTableScrolledComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		formToolkit.adapt(sqlTableScrolledComposite);
		formToolkit.paintBordersFor(sqlTableScrolledComposite);
		sqlTableScrolledComposite.setExpandHorizontal(true);
		sqlTableScrolledComposite.setExpandVertical(true);

		String[] sqlTitles = { 
							"instInstId"                        
							,"sqlSqlId"                          
							,"childChildNumber"                  
							,"planPlanHashValue"                 
							,"parsingParsingSchemaName"          
							,"serviceService"                    
							,"moduleModule"                      
							,"actionAction"                      
							,"firstFirstLoadTime"                
							,"lastLastLoadTime"                  
							,"lastLastActiveTime"                
							,"loadsLoads"                        
							,"invalidationsInvalidations"        
							,"parseParseCalls"                   
							,"executionsExecutions"              
							,"pxPxDop"                           
							,"fetchesFetches"                    
							,"sortsSorts"                        
							,"rowsRowsProcessed"                 
							,"bufferBufferGets"                  
							,"diskDiskReads"                     
							,"directDirectWrites"                
							,"physicalPhysicalReadRequests"      
							,"physicalPhysicalWriteRequests"     
							,"optimizedOptimizedPhyReadRequests" 
							,"ioIoInterconnectBytes"             
							,"physicalPhysicalReadBytes"         
							,"physicalPhysicalWriteBytes"        
							,"ioIoCellOffloadEligibleBytes"      
							,"ioIoCellOffloadReturnedBytes"      
							,"ioIoCellUncompressedBytes"         
							,"imImScans"                         
							,"imImScanBytesUncompressed"         
							,"imImScanBytesInmemory"             
							,"elapsedElapsedTime"                
							,"cpuCpuTime"                        
							,"userUserIoWaitTime"                
							,"concurrencyConcurrencyWaitTime"    
							,"applicationApplicationWaitTime"    
							,"clusterClusterWaitTime"            
							,"otherOtherWaitTime"                
							,"plsqlPlsqlExecTime"                
							,"lastLastMemoryUsed"                
							,"lastLastTempsegSize"               
		};
		int[] sqlBounds = { 
						100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100,100
						,100,100,100,100
		};
		int[] sqlAligns = {
				SWT.LEFT, SWT.LEFT, SWT.RIGHT, SWT.RIGHT, SWT.LEFT
				,SWT.LEFT, SWT.LEFT, SWT.LEFT, SWT.LEFT, SWT.LEFT
				,SWT.LEFT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT
				,SWT.RIGHT, SWT.RIGHT, SWT.RIGHT, SWT.RIGHT 
				};

		sqlTableViewer = new TableViewer(sqlTableScrolledComposite, SWT.FULL_SELECTION | SWT.BORDER);

		createTableColumn(sqlTableViewer, sqlTitles, sqlBounds, sqlAligns);
		sqlTableViewer.setContentProvider(new ArrayContentProvider());
		sqlTableViewer.setLabelProvider(new StringArrayListLabelProvider());
		sqlTable = sqlTableViewer.getTable();
		sqlTable.setHeaderVisible(true);
		sqlTable.setLinesVisible(true);
		sqlTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1));
		sqlTableScrolledComposite.setContent(sqlTable);
		sqlTableScrolledComposite.setMinSize(sqlTable.computeSize(SWT.DEFAULT, SWT.DEFAULT));
		formToolkit.paintBordersFor(sqlTable);
		
		tapFolder = new CTabFolder(mainComposite, SWT.BORDER);
		tapFolder.setTabPosition(SWT.TOP);
		tapFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tapFolder.setFont(getDefaultFont());
		formToolkit.adapt(tapFolder);
		formToolkit.paintBordersFor(tapFolder);
		tapFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));
		
		CTabItem tapItemStr = new CTabItem(tapFolder, SWT.NONE);
		tapItemStr.setText("Overview List");
		tapItemStr.setFont(getDefaultFont());
		
		Composite tabComp = new Composite(tapFolder, SWT.NONE);
		tapItemStr.setControl(tabComp);
		formToolkit.paintBordersFor(tabComp);
		tabComp.setLayout(new GridLayout(1, false));
		
		ScrolledComposite overviewTableScrolledComposite = new ScrolledComposite(tabComp, SWT.H_SCROLL | SWT.V_SCROLL);
		overviewTableScrolledComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		formToolkit.adapt(overviewTableScrolledComposite);
		formToolkit.paintBordersFor(overviewTableScrolledComposite);
		overviewTableScrolledComposite.setExpandHorizontal(true);
		overviewTableScrolledComposite.setExpandVertical(true);

		String[] overviewTitles = {"name","valueString","datatypeString","datatype"};
		int[] overviewBounds = {100,100,100,100};
		int[] overviewAligns = {SWT.LEFT, SWT.LEFT, SWT.LEFT, SWT.LEFT};

		overviewTableViewer = new TableViewer(overviewTableScrolledComposite, SWT.FULL_SELECTION | SWT.BORDER);

		createTableColumn(overviewTableViewer, overviewTitles, overviewBounds, overviewAligns);
		overviewTableViewer.setContentProvider(new ArrayContentProvider());
		overviewTableViewer.setLabelProvider(new StringArrayListLabelProvider());
		overviewTable = overviewTableViewer.getTable();
		overviewTable.setHeaderVisible(true);
		overviewTable.setLinesVisible(true);
		overviewTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1));
		overviewTableScrolledComposite.setContent(overviewTable);
		overviewTableScrolledComposite.setMinSize(overviewTable.computeSize(SWT.DEFAULT, SWT.DEFAULT));
		formToolkit.paintBordersFor(overviewTable);

		scrolledComposite.setContent(mainComposite);
		scrolledComposite.setMinSize(mainComposite.computeSize(SWT.DEFAULT, SWT.DEFAULT));

		sqlTable.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				Table table = (Table)e.widget;
				TableItem row = table.getSelection()[0];
				SqlViewerParamInfo sqlViewerParamInfo = new SqlViewerParamInfo();
				sqlViewerParamInfo.setInstId(row.getText(0));
				sqlViewerParamInfo.setSqlId(row.getText(1));
				sqlViewerParamInfo.setChildNumber(row.getText(2));
				List<SqlViewerOverViewInfo> overViewList = rpmSqlViewerService.getOverViewList(sqlViewerParamInfo);
				setOverviewTableInfo(overViewList);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				
			}
		});

		init();
	}

	private void init() {
		List<SqlViewerSqlInfo> sqlInfoList = this.rpmSqlViewerService.getSqlInfoList();
		setSqlTableInfo(sqlInfoList);
		
		if(tapFolder.getSelectionIndex()<0){
			tapFolder.setSelection(0);
		}
	}

	public void setSqlTableInfo(List<SqlViewerSqlInfo> sqlInfoList) {
		List<String[]> list = new ArrayList<String[]>();
		if(sqlInfoList!=null){
			for (SqlViewerSqlInfo sqlViewerSqlInfo : sqlInfoList) {
				String[] row = { 
						sqlViewerSqlInfo.getInstId()
						,sqlViewerSqlInfo.getSqlId()
						,sqlViewerSqlInfo.getChildNumber()
						,sqlViewerSqlInfo.getPlanHashValue()
						,sqlViewerSqlInfo.getParsingSchemaName()
						,sqlViewerSqlInfo.getService()
						,sqlViewerSqlInfo.getModule()
						,sqlViewerSqlInfo.getAction()
						,sqlViewerSqlInfo.getFirstLoadTime()
						,sqlViewerSqlInfo.getLastLoadTime()
						,sqlViewerSqlInfo.getLastActiveTime()
						,sqlViewerSqlInfo.getLoads()
						,sqlViewerSqlInfo.getInvalidations()
						,sqlViewerSqlInfo.getParseCalls()
						,sqlViewerSqlInfo.getExecutions()
						,sqlViewerSqlInfo.getPxDop()
						,sqlViewerSqlInfo.getFetches()
						,sqlViewerSqlInfo.getSorts()
						,sqlViewerSqlInfo.getRowsProcessed()
						,sqlViewerSqlInfo.getBufferGets()
						,sqlViewerSqlInfo.getDiskReads()
						,sqlViewerSqlInfo.getDirectWrites()
						,sqlViewerSqlInfo.getPhysicalReadRequests()
						,sqlViewerSqlInfo.getPhysicalWriteRequests()
						,sqlViewerSqlInfo.getOptimizedPhyReadRequests()
						,sqlViewerSqlInfo.getIoInterconnectBytes()
						,sqlViewerSqlInfo.getPhysicalReadBytes()
						,sqlViewerSqlInfo.getPhysicalWriteBytes()
						,sqlViewerSqlInfo.getIoCellOffloadEligibleBytes()
						,sqlViewerSqlInfo.getIoCellOffloadReturnedBytes()
						,sqlViewerSqlInfo.getIoCellUncompressedBytes()
						,sqlViewerSqlInfo.getImScans()
						,sqlViewerSqlInfo.getImScanBytesUncompressed()
						,sqlViewerSqlInfo.getImScanBytesInmemory()
						,sqlViewerSqlInfo.getElapsedTime()
						,sqlViewerSqlInfo.getCpuTime()
						,sqlViewerSqlInfo.getUserIoWaitTime()
						,sqlViewerSqlInfo.getConcurrencyWaitTime()
						,sqlViewerSqlInfo.getApplicationWaitTime()
						,sqlViewerSqlInfo.getClusterWaitTime()
						,sqlViewerSqlInfo.getOtherWaitTime()
						,sqlViewerSqlInfo.getPlsqlExecTime()
						,sqlViewerSqlInfo.getLastMemoryUsed()
						,sqlViewerSqlInfo.getLastTempsegSize()
				};
				list.add(row);
			}
		}
		sqlTableViewer.setInput(list);
	}
	
	public void setOverviewTableInfo(List<SqlViewerOverViewInfo> overViewList) {
		List<String[]> list = new ArrayList<String[]>();
		if(overViewList!=null){
			for (SqlViewerOverViewInfo overViewInfo : overViewList) {
				String[] row = { 
						overViewInfo.getName(), overViewInfo.getValueString()
						,overViewInfo.getDatatypeString(), overViewInfo.getDatatype()
				};
				list.add(row);
			}
		}
		overviewTableViewer.setInput(list);
	}

	@Override
	public void reflesh() {
		init();
	}
}
